/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultAdminPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings_tab.ts
var import_obsidian2 = require("obsidian");

// src/l10n/locale.ts
var import_obsidian = require("obsidian");

// src/l10n/locale/en.ts
var en_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "Omnivore Settings",
  "Omnivore Folder": "Folder",
  "Omnivore Keep On Startup": "Keep On Startup",
  "Omnivore Last Keep": "Last Keep",
  "Reset to default": "Reset to default",
  "Dictionary Settings": "Dictionary Settings",
  "Language": "Language"
};

// src/l10n/locale/zh-cn.ts
var zh_cn_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "\u6574\u7406 Omnivore \u6587\u6863\u4E2D\u7684\u5F02\u5E38\u6807\u7B7E",
  "Omnivore Folder": "Omnivore \u76EE\u5F55",
  "Omnivore Last Keep": "Omnivore \u6700\u540E\u4E00\u6B21\u6574\u7406\u65F6\u95F4",
  "Reset to default": "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u8BBE\u7F6E",
  "Dictionary Settings": "\u8BCD\u5178\u8BBE\u7F6E",
  "Language": "\u8BED\u8A00"
};

// src/l10n/locale.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  if (!locale) {
    console.error("Error: dictionary locale not found", import_obsidian.moment.locale());
  }
  return locale && locale[str] || en_default[str];
}

// src/settings_tab.ts
var VaultAdminSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: t("Omnivore Settings") });
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Folder")).addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.omnivoreFolder).onChange(async (value) => {
      this.plugin.settings.omnivoreFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Keep On Startup")).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.keepOnStart).onChange(async (value) => {
        this.plugin.settings.keepOnStart = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Frequency").addText(
      (text) => text.setPlaceholder("Enter the frequency").setValue(this.plugin.settings.frequency.toString()).onChange(async (value) => {
        const frequency = parseInt(value);
        if (isNaN(frequency)) {
          new import_obsidian2.Notice("Frequency must be a positive integer");
          return;
        }
        this.plugin.settings.frequency = frequency;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Last Keep")).addMomentFormat(
      (momentFormat) => momentFormat.setPlaceholder("Last Sync").setValue(this.plugin.settings.keepAt).setDefaultFormat("yyyy-MM-dd'T'HH:mm:ss").onChange(async (value) => {
        this.plugin.settings.keepAt = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Discovering Connections in Notes" });
    containerEl.createEl("h3", { text: "Chat with a Single Note or the Valut" });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  omnivoreFolder: "Omnivore",
  keepAt: "2023-05-01T00:00:00",
  keepOnStart: true,
  frequency: 1
};
var VaultAdminPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      new import_obsidian3.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    const iconId = "VA:keep";
    (0, import_obsidian3.addIcon)(
      iconId,
      `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="currentColor" d="M15.9 7.801c0 .507-.123 1.12-.248 1.656v.004l-.001.003a2.87 2.87 0 0 1-2.793 2.186h-.036c-1.625 0-2.649-1.334-2.649-2.828v-2.14l-1.21 1.794-.067.055a1.404 1.404 0 0 1-1.793 0l-.065-.053-1.248-1.82v4.414H4.6V6.268c0-.91 1.078-1.439 1.794-.802l.055.048 1.46 2.13a.21.21 0 0 0 .179 0l1.43-2.119.065-.054c.68-.567 1.78-.138 1.78.815v2.536c0 .971.619 1.638 1.46 1.638h.035c.78 0 1.45-.527 1.636-1.277.125-.534.216-1.026.216-1.378-.017-3.835-3.262-6.762-7.188-6.498-3.311.23-5.986 2.905-6.216 6.216A6.705 6.705 0 0 0 8 14.693v1.19a7.895 7.895 0 0 1-7.882-8.44C.39 3.536 3.536.39 7.44.118 12.017-.19 15.88 3.242 15.9 7.8z"/></svg>`
    );
    this.addRibbonIcon(iconId, iconId, async (evt) => {
    });
    this.addRibbonIcon(iconId, "VA: Discovery the connections", (evt) => {
    });
    this.addRibbonIcon(iconId, "VA: Chat", (evt) => {
    });
    this.addSettingTab(new VaultAdminSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
