/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultAdminPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings_tab.ts
var import_obsidian2 = require("obsidian");

// src/l10n/locale.ts
var import_obsidian = require("obsidian");

// src/l10n/locale/en.ts
var en_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "Omnivore Settings",
  "Omnivore Folder": "Folder",
  "Omnivore Keep On Startup": "Keep On Startup",
  "Omnivore Last Keep": "Last Keep",
  "Reset to default": "Reset to default",
  "Dictionary Settings": "Dictionary Settings",
  "Language": "Language",
  // va chat
  "VA Chat View": "VA Chat",
  "VA Discovery View": "VA Discovery"
};

// src/l10n/locale/zh-cn.ts
var zh_cn_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "\u6574\u7406 Omnivore \u6587\u6863\u4E2D\u7684\u5F02\u5E38\u6807\u7B7E",
  "Omnivore Folder": "Omnivore \u76EE\u5F55",
  "Omnivore Last Keep": "Omnivore \u6700\u540E\u4E00\u6B21\u6574\u7406\u65F6\u95F4",
  "Reset to default": "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u8BBE\u7F6E",
  "Dictionary Settings": "\u8BCD\u5178\u8BBE\u7F6E",
  "Language": "\u8BED\u8A00"
};

// src/l10n/locale.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  if (!locale) {
    console.error("Error: dictionary locale not found", import_obsidian.moment.locale());
  }
  return locale && locale[str] || en_default[str];
}

// src/settings_tab.ts
var VaultAdminSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: t("Omnivore Settings") });
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Folder")).addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.omnivoreFolder).onChange(async (value) => {
      this.plugin.settings.omnivoreFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Keep On Startup")).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.keepOnStart).onChange(async (value) => {
        this.plugin.settings.keepOnStart = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Frequency").addText(
      (text) => text.setPlaceholder("Enter the frequency").setValue(this.plugin.settings.frequency.toString()).onChange(async (value) => {
        const frequency = parseInt(value);
        if (isNaN(frequency)) {
          new import_obsidian2.Notice("Frequency must be a positive integer");
          return;
        }
        this.plugin.settings.frequency = frequency;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Last Keep")).addMomentFormat(
      (momentFormat) => momentFormat.setPlaceholder("Last Sync").setValue(this.plugin.settings.keepAt).setDefaultFormat("yyyy-MM-dd'T'HH:mm:ss").onChange(async (value) => {
        this.plugin.settings.keepAt = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Discovering Connections in Notes" });
    containerEl.createEl("h3", { text: "Chat with a Single Note or the Valut" });
  }
};

// src/view/va_chat.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_VA_CHAT = "va-chat-view";
var VAChatView = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_VA_CHAT;
  }
  getDisplayText() {
    return t("VA Chat View");
  }
  async onOpen() {
    this.icon = "message-circle";
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "VA CHAT view" });
  }
  async onClose() {
  }
};

// src/view/va_discovery.ts
var import_obsidian4 = require("obsidian");
var VIEW_TYPE_VA_DISCOVERY = "va-discovery-view";
var VADiscoveryView = class extends import_obsidian4.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_VA_DISCOVERY;
  }
  getDisplayText() {
    return t("VA Discovery View");
  }
  async onOpen() {
    this.icon = "link-2";
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "VIEW_TYPE_VA_DISCOVERY view" });
  }
  async onClose() {
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  omnivoreFolder: "Omnivore",
  keepAt: "2023-05-01T00:00:00",
  keepOnStart: true,
  frequency: 1
};
var VaultAdminPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_VA_CHAT,
      (leaf) => new VAChatView(leaf)
    );
    this.registerView(
      VIEW_TYPE_VA_DISCOVERY,
      (leaf) => new VADiscoveryView(leaf)
    );
    const iconId = "VA:keep";
    this.addRibbonIcon("book-marked", iconId, async (evt) => {
      new import_obsidian5.Notice("start to clean the tags in Omnivore folder!");
    });
    const discoveryIcon = "VA:discovery";
    this.addRibbonIcon("link-2", discoveryIcon, async (evt) => {
      this.openDiscoveryView();
    });
    const chatIcon = "VA:chat";
    this.addRibbonIcon("message-circle", chatIcon, async (evt) => {
      this.openChatView();
    });
    this.addSettingTab(new VaultAdminSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async openChatView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_VA_CHAT);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_VA_CHAT, active: true });
      } else {
        console.error("Failed to create a new leaf for the chat view.");
        return;
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async openDiscoveryView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_VA_DISCOVERY);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_VA_DISCOVERY, active: true });
      } else {
        console.error("Leaf is null or undefined.");
        return;
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
