/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultAdminPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings_tab.ts
var import_obsidian2 = require("obsidian");

// src/l10n/locale.ts
var import_obsidian = require("obsidian");

// src/l10n/locale/en.ts
var en_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "Omnivore Settings",
  "Omnivore Folder": "Folder",
  "Omnivore TagAmender On Startup": "TagAmender On Startup",
  "Omnivore Tag Last Amend": "Tag Last Amend",
  "Reset to default": "Reset to default",
  "Dictionary Settings": "Dictionary Settings",
  "Language": "Language",
  // va chat
  "VA Chat View": "VA Chat",
  "VA Discovery View": "VA Discovery"
};

// src/l10n/locale/zh-cn.ts
var zh_cn_default = {
  //settings_tab.ts
  // Omnivore settings
  "Omnivore Settings": "\u6574\u7406 Omnivore \u6587\u6863\u4E2D\u7684\u5F02\u5E38\u6807\u7B7E",
  "Omnivore Folder": "Omnivore \u76EE\u5F55",
  "Omnivore Last TagAmender": "Omnivore \u6807\u7B7E\u6700\u540E\u4E00\u6B21\u6574\u7406\u65F6\u95F4\u6233",
  "Reset to default": "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u8BBE\u7F6E",
  "Dictionary Settings": "\u8BCD\u5178\u8BBE\u7F6E",
  "Language": "\u8BED\u8A00"
};

// src/l10n/locale.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  if (!locale) {
    console.error("Error: dictionary locale not found", import_obsidian.moment.locale());
  }
  return locale && locale[str] || en_default[str];
}

// src/settings_tab.ts
var VaultAdminSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: t("Omnivore Settings") });
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Folder")).addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.omnivoreFolder).onChange(async (value) => {
      this.plugin.settings.omnivoreFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore TagAmender On Startup")).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.keepOnStart).onChange(async (value) => {
        this.plugin.settings.keepOnStart = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Frequency").addText(
      (text) => text.setPlaceholder("Enter the frequency").setValue(this.plugin.settings.frequency.toString()).onChange(async (value) => {
        const frequency = parseInt(value);
        if (isNaN(frequency)) {
          new import_obsidian2.Notice("Frequency must be a positive integer");
          return;
        }
        this.plugin.settings.frequency = frequency;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("Omnivore Tag Last Amend")).addMomentFormat(
      (momentFormat) => momentFormat.setPlaceholder("Last Sync").setValue(this.plugin.settings.keepAt).setDefaultFormat("yyyy-MM-dd'T'HH:mm:ss").onChange(async (value) => {
        this.plugin.settings.keepAt = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Discovering Connections in Notes" });
    containerEl.createEl("h3", { text: "Chat with a Single Note or the Valut" });
  }
};

// src/view/va_chat.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_VA_CHAT = "va-chat-view";
var VAChatView = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_VA_CHAT;
  }
  getDisplayText() {
    return t("VA Chat View");
  }
  async onOpen() {
    this.icon = "message-circle";
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "VA CHAT view" });
  }
  async onClose() {
  }
};

// src/view/va_discovery.ts
var import_obsidian4 = require("obsidian");
var VIEW_TYPE_VA_DISCOVERY = "va-discovery-view";
var VADiscoveryView = class extends import_obsidian4.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_VA_DISCOVERY;
  }
  getDisplayText() {
    return t("VA Discovery View");
  }
  async onOpen() {
    this.icon = "link-2";
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "VIEW_TYPE_VA_DISCOVERY view" });
  }
  async onClose() {
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  omnivoreFolder: "Omnivore",
  keepAt: "2023-05-01T00:00:00",
  keepOnStart: true,
  frequency: 1
};
var VaultAdminPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_VA_CHAT,
      (leaf) => new VAChatView(leaf)
    );
    this.registerView(
      VIEW_TYPE_VA_DISCOVERY,
      (leaf) => new VADiscoveryView(leaf)
    );
    const iconId = "VA:tag-amender";
    this.addRibbonIcon("book-marked", iconId, async (evt) => {
      new import_obsidian5.Notice("start to clean the tags in Omnivore folder!");
    });
    const discoveryIcon = "VA:discovery";
    this.addRibbonIcon("link-2", discoveryIcon, async (evt) => {
      this.openDiscoveryView();
    });
    const chatIcon = "VA:chat";
    this.addRibbonIcon("message-circle", chatIcon, async (evt) => {
      this.openChatView();
    });
    this.addSettingTab(new VaultAdminSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async openChatView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_VA_CHAT);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_VA_CHAT, active: true });
      } else {
        console.error("Failed to create a new leaf for the chat view.");
        return;
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async openDiscoveryView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_VA_DISCOVERY);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_VA_DISCOVERY, active: true });
      } else {
        console.error("Leaf is null or undefined.");
        return;
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3NfdGFiLnRzIiwgInNyYy9sMTBuL2xvY2FsZS50cyIsICJzcmMvbDEwbi9sb2NhbGUvZW4udHMiLCAic3JjL2wxMG4vbG9jYWxlL3poLWNuLnRzIiwgInNyYy92aWV3L3ZhX2NoYXQudHMiLCAic3JjL3ZpZXcvdmFfZGlzY292ZXJ5LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIGFkZEljb24sIFdvcmtzcGFjZUxlYWYsIFZpZXdDcmVhdG9yIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IHQgZnJvbSAnc3JjL2wxMG4vbG9jYWxlJztcclxuaW1wb3J0IHsgVmF1bHRBZG1pblNldHRpbmdUYWIgfSBmcm9tICdzcmMvc2V0dGluZ3NfdGFiJztcclxuaW1wb3J0IHsgVklFV19UWVBFX1ZBX0NIQVQsIFZBQ2hhdFZpZXcgfSBmcm9tICdzcmMvdmlldy92YV9jaGF0JztcclxuaW1wb3J0IHsgVklFV19UWVBFX1ZBX0RJU0NPVkVSWSwgVkFEaXNjb3ZlcnlWaWV3IH0gZnJvbSAnc3JjL3ZpZXcvdmFfZGlzY292ZXJ5JztcclxuXHJcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxyXG5cclxuaW50ZXJmYWNlIFZhdWx0QWRtaW5QbHVnaW5TZXR0aW5ncyB7XHJcblx0b21uaXZvcmVGb2xkZXI6IHN0cmluZztcclxuXHRrZWVwQXQ6IHN0cmluZztcclxuXHRrZWVwT25TdGFydDogYm9vbGVhbjtcclxuXHRmcmVxdWVuY3k6IG51bWJlcjtcclxuXHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFZhdWx0QWRtaW5QbHVnaW5TZXR0aW5ncyA9IHtcclxuXHRvbW5pdm9yZUZvbGRlcjogJ09tbml2b3JlJyxcclxuXHRrZWVwQXQ6ICcyMDIzLTA1LTAxVDAwOjAwOjAwJyxcclxuXHRrZWVwT25TdGFydDogdHJ1ZSxcclxuXHRmcmVxdWVuY3k6IDEsXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhdWx0QWRtaW5QbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBWYXVsdEFkbWluUGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cclxuXHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXHJcblx0XHRcdFZJRVdfVFlQRV9WQV9DSEFULFxyXG5cdFx0XHQobGVhZikgPT4gbmV3IFZBQ2hhdFZpZXcobGVhZilcclxuXHRcdCk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyVmlldyhcclxuXHRcdFx0VklFV19UWVBFX1ZBX0RJU0NPVkVSWSxcclxuXHRcdFx0KGxlYWYpID0+IG5ldyBWQURpc2NvdmVyeVZpZXcobGVhZilcclxuXHRcdCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRcdGNvbnN0IGljb25JZCA9ICdWQTp0YWctYW1lbmRlcidcclxuXHRcdC8vIFRoaXMgY3JlYXRlcyBhbiBpY29uIGluIHRoZSBsZWZ0IHJpYmJvbi5cclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcImJvb2stbWFya2VkXCIsIGljb25JZCwgYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHQvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGljb24uXHJcblx0XHRcdC8vIFx1NUJGOVx1NzZFRVx1NUY1NVx1OTFDQ1x1NzY4NFx1NjI0MFx1NjcwOVx1NTE4NVx1NUJCOVx1OEZEQlx1ODg0Q3RhZ1x1NjU3NFx1NzQwNlx1MzAwMlxyXG5cdFx0XHRuZXcgTm90aWNlKCdzdGFydCB0byBjbGVhbiB0aGUgdGFncyBpbiBPbW5pdm9yZSBmb2xkZXIhJyk7XHJcblx0XHR9KVxyXG5cclxuXHJcblx0XHRjb25zdCBkaXNjb3ZlcnlJY29uID0gJ1ZBOmRpc2NvdmVyeSdcclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcImxpbmstMlwiLCBkaXNjb3ZlcnlJY29uLCBhc3luYyAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XHJcblx0XHRcdHRoaXMub3BlbkRpc2NvdmVyeVZpZXcoKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbnN0IGNoYXRJY29uID0gJ1ZBOmNoYXQnXHJcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oXCJtZXNzYWdlLWNpcmNsZVwiLCBjaGF0SWNvbiwgYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHR0aGlzLm9wZW5DaGF0VmlldygpO1xyXG5cdFx0fSk7XHJcblxyXG5cclxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFZhdWx0QWRtaW5TZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHBsdWdpbiBob29rcyB1cCBhbnkgZ2xvYmFsIERPTSBldmVudHMgKG9uIHBhcnRzIG9mIHRoZSBhcHAgdGhhdCBkb2Vzbid0IGJlbG9uZyB0byB0aGlzIHBsdWdpbilcclxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cclxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnY2xpY2snLCBldnQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKCdzZXRJbnRlcnZhbCcpLCA1ICogNjAgKiAxMDAwKSk7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHJcblx0fVxyXG5cclxuXHJcblx0YXN5bmMgb3BlbkNoYXRWaWV3KCkge1xyXG5cdFx0Y29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xyXG5cclxuXHRcdGxldCBsZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XHJcblx0XHRjb25zdCBsZWF2ZXMgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9WQV9DSEFUKTtcclxuXHJcblx0XHRpZiAobGVhdmVzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Ly8gQSBsZWFmIHdpdGggb3VyIHZpZXcgYWxyZWFkeSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRcdGxlYWYgPSBsZWF2ZXNbMF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBPdXIgdmlldyBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIHdvcmtzcGFjZSwgY3JlYXRlIGEgbmV3IGxlYWZcclxuXHRcdFx0Ly8gaW4gdGhlIHJpZ2h0IHNpZGViYXIgZm9yIGl0XHJcblx0XHRcdGxlYWYgPSB3b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKTtcclxuXHRcdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0XHRhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IFZJRVdfVFlQRV9WQV9DSEFULCBhY3RpdmU6IHRydWUgfSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBhIG5ldyBsZWFmIGZvciB0aGUgY2hhdCB2aWV3LicpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFwiUmV2ZWFsXCIgdGhlIGxlYWYgaW4gY2FzZSBpdCBpcyBpbiBhIGNvbGxhcHNlZCBzaWRlYmFyXHJcblx0XHRpZiAobGVhZikge1xyXG5cdFx0XHR3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyBvcGVuRGlzY292ZXJ5VmlldygpIHtcclxuXHRcdGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcclxuXHJcblx0XHRsZXQgbGVhZjogV29ya3NwYWNlTGVhZiB8IG51bGwgPSBudWxsO1xyXG5cdFx0Y29uc3QgbGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfVkFfRElTQ09WRVJZKTtcclxuXHJcblx0XHRpZiAobGVhdmVzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Ly8gQSBsZWFmIHdpdGggb3VyIHZpZXcgYWxyZWFkeSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRcdGxlYWYgPSBsZWF2ZXNbMF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBPdXIgdmlldyBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIHdvcmtzcGFjZSwgY3JlYXRlIGEgbmV3IGxlYWZcclxuXHRcdFx0Ly8gaW4gdGhlIHJpZ2h0IHNpZGViYXIgZm9yIGl0XHJcblx0XHRcdGxlYWYgPSB3b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKTtcclxuXHRcdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0XHRhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IFZJRVdfVFlQRV9WQV9ESVNDT1ZFUlksIGFjdGl2ZTogdHJ1ZSB9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBcdTUzRUZcdTRFRTVcdTZERkJcdTUyQTBcdTRFMDBcdTRFOUJcdTY1RTVcdTVGRDdcdThCQjBcdTVGNTVcdTYyMTZcdTgwMDVcdTk1MTlcdThCRUZcdTU5MDRcdTc0MDZcdTkwM0JcdThGOTFcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdMZWFmIGlzIG51bGwgb3IgdW5kZWZpbmVkLicpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFwiUmV2ZWFsXCIgdGhlIGxlYWYgaW4gY2FzZSBpdCBpcyBpbiBhIGNvbGxhcHNlZCBzaWRlYmFyXHJcblx0XHRpZiAobGVhZikge1xyXG5cdFx0XHR3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBTYW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xyXG5cdFx0c3VwZXIoYXBwKTtcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLnNldFRleHQoJ1dvYWghJyk7XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuXHJcbiIsICJpbXBvcnQgeyBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgdCBmcm9tICdzcmMvbDEwbi9sb2NhbGUnO1xyXG5pbXBvcnQgVmF1bHRBZG1pblBsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhdWx0QWRtaW5TZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IFZhdWx0QWRtaW5QbHVnaW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVmF1bHRBZG1pblBsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqICBPbW5pdm9yZSBPcHRpb25zLCBzdWNoIGFzIGZvbGRlciBsb2NhdGlvbiwgbGFzdCB0aW1lLCBldGMuXHJcbiAgICAgICAgKiovXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiB0KCdPbW5pdm9yZSBTZXR0aW5ncycpIH0pXHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSh0KCdPbW5pdm9yZSBGb2xkZXInKSlcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgc2VjcmV0JylcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbW5pdm9yZUZvbGRlcilcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbW5pdm9yZUZvbGRlciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKHQoJ09tbml2b3JlIFRhZ0FtZW5kZXIgT24gU3RhcnR1cCcpKVxyXG4gICAgICAgICAgICAvLyAuc2V0RGVzYyhcclxuICAgICAgICAgICAgLy8gICAgICdDaGVjayB0aGlzIGJveCBpZiB5b3Ugd2FudCB0byBzeW5jIHdpdGggT21uaXZvcmUgd2hlbiB0aGUgYXBwIGlzIGxvYWRlZCcsXHJcbiAgICAgICAgICAgIC8vIClcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmtlZXBPblN0YXJ0KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mua2VlcE9uU3RhcnQgPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdGcmVxdWVuY3knKVxyXG4gICAgICAgICAgICAvLyAuc2V0RGVzYyhcclxuICAgICAgICAgICAgLy8gICAgICdFbnRlciB0aGUgZnJlcXVlbmN5IGluIG1pbnV0ZXMgdG8gc3luYyB3aXQnLFxyXG4gICAgICAgICAgICAvLyApXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdGhlIGZyZXF1ZW5jeScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZyZXF1ZW5jeS50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsaWRhdGUgZnJlcXVlbmN5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZXF1ZW5jeSA9IHBhcnNlSW50KHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oZnJlcXVlbmN5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRnJlcXVlbmN5IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgZnJlcXVlbmN5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZyZXF1ZW5jeSA9IGZyZXF1ZW5jeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5wbHVnaW4uc2NoZWR1bGVTeW5jKClcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUodCgnT21uaXZvcmUgVGFnIExhc3QgQW1lbmQnKSlcclxuICAgICAgICAgICAgLmFkZE1vbWVudEZvcm1hdCgobW9tZW50Rm9ybWF0KSA9PlxyXG4gICAgICAgICAgICAgICAgbW9tZW50Rm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdMYXN0IFN5bmMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5rZWVwQXQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldERlZmF1bHRGb3JtYXQoXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3NcIilcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmtlZXBBdCA9IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnRGlzY292ZXJpbmcgQ29ubmVjdGlvbnMgaW4gTm90ZXMnIH0pXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0NoYXQgd2l0aCBhIFNpbmdsZSBOb3RlIG9yIHRoZSBWYWx1dCcgfSlcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTXVsdGlQcm9wU2V0dGluZ3Mge1xyXG4gICAga2VlcEF0OiBzdHJpbmc7XHJcbiAgICBvbW5pdm9yZUZvbGRlcjogc3RyaW5nO1xyXG4gICAga2VlcE9uU3RhcnQ6IGJvb2xlYW47XHJcbiAgICBmcmVxdWVuY3k6IG51bWJlcjtcclxufSIsICJpbXBvcnQgeyBtb21lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IGVuIGZyb20gXCIuL2xvY2FsZS9lblwiO1xyXG5pbXBvcnQgemhDTiBmcm9tIFwiLi9sb2NhbGUvemgtY25cIjtcclxuXHJcbmNvbnN0IGxvY2FsZU1hcDogeyBbazogc3RyaW5nXTogUGFydGlhbDx0eXBlb2YgZW4+IH0gPSB7XHJcbiAgICBlbixcclxuICAgIFwiemgtY25cIjogemhDTixcclxufTtcclxuXHJcbmNvbnN0IGxvY2FsZSA9IGxvY2FsZU1hcFttb21lbnQubG9jYWxlKCldO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdChzdHI6IGtleW9mIHR5cGVvZiBlbik6IHN0cmluZyB7XHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogZGljdGlvbmFyeSBsb2NhbGUgbm90IGZvdW5kXCIsIG1vbWVudC5sb2NhbGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChsb2NhbGUgJiYgbG9jYWxlW3N0cl0pIHx8IGVuW3N0cl07XHJcbn0iLCAiLy8gRW5nbGlzaFxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cclxuICAgIC8vc2V0dGluZ3NfdGFiLnRzXHJcblxyXG5cclxuICAgIC8vIE9tbml2b3JlIHNldHRpbmdzXHJcbiAgICBcIk9tbml2b3JlIFNldHRpbmdzXCI6IFwiT21uaXZvcmUgU2V0dGluZ3NcIixcclxuICAgIFwiT21uaXZvcmUgRm9sZGVyXCI6IFwiRm9sZGVyXCIsXHJcbiAgICBcIk9tbml2b3JlIFRhZ0FtZW5kZXIgT24gU3RhcnR1cFwiOiBcIlRhZ0FtZW5kZXIgT24gU3RhcnR1cFwiLFxyXG4gICAgXCJPbW5pdm9yZSBUYWcgTGFzdCBBbWVuZFwiOiBcIlRhZyBMYXN0IEFtZW5kXCIsXHJcblxyXG5cclxuICAgIFwiUmVzZXQgdG8gZGVmYXVsdFwiOiBcIlJlc2V0IHRvIGRlZmF1bHRcIixcclxuICAgICdEaWN0aW9uYXJ5IFNldHRpbmdzJzogJ0RpY3Rpb25hcnkgU2V0dGluZ3MnLFxyXG4gICAgJ0xhbmd1YWdlJzogJ0xhbmd1YWdlJyxcclxuXHJcblxyXG4gICAgLy8gdmEgY2hhdFxyXG4gICAgXCJWQSBDaGF0IFZpZXdcIjogXCJWQSBDaGF0XCIsXHJcbiAgICBcIlZBIERpc2NvdmVyeSBWaWV3XCI6IFwiVkEgRGlzY292ZXJ5XCIsXHJcblxyXG59OyIsICIvLyBcdTdCODBcdTRGNTNcdTRFMkRcdTY1ODdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgICAvL3NldHRpbmdzX3RhYi50c1xyXG5cclxuICAgIFxyXG4gICAgLy8gT21uaXZvcmUgc2V0dGluZ3NcclxuXHJcbiAgICBcIk9tbml2b3JlIFNldHRpbmdzXCI6IFwiXHU2NTc0XHU3NDA2IE9tbml2b3JlIFx1NjU4N1x1Njg2M1x1NEUyRFx1NzY4NFx1NUYwMlx1NUUzOFx1NjgwN1x1N0I3RVwiLFxyXG4gICAgXCJPbW5pdm9yZSBGb2xkZXJcIjogXCJPbW5pdm9yZSBcdTc2RUVcdTVGNTVcIixcclxuICAgIFwiT21uaXZvcmUgTGFzdCBUYWdBbWVuZGVyXCI6IFwiT21uaXZvcmUgXHU2ODA3XHU3QjdFXHU2NzAwXHU1NDBFXHU0RTAwXHU2QjIxXHU2NTc0XHU3NDA2XHU2NUY2XHU5NUY0XHU2MjMzXCIsXHJcblxyXG5cclxuXHJcbiAgICBcIlJlc2V0IHRvIGRlZmF1bHRcIjogXCJcdTkxQ0RcdTdGNkVcdTRFM0FcdTlFRDhcdThCQTRcdThCQkVcdTdGNkVcIixcclxuICAgICdEaWN0aW9uYXJ5IFNldHRpbmdzJzogJ1x1OEJDRFx1NTE3OFx1OEJCRVx1N0Y2RScsXHJcbiAgICAnTGFuZ3VhZ2UnOiAnXHU4QkVEXHU4QTAwJyxcclxufTsiLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHQgZnJvbSAnc3JjL2wxMG4vbG9jYWxlJztcclxuXHJcbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfVkFfQ0hBVCA9IFwidmEtY2hhdC12aWV3XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVkFDaGF0VmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XHJcbiAgICBzdXBlcihsZWFmKTtcclxuICB9XHJcblxyXG4gIGdldFZpZXdUeXBlKCkge1xyXG4gICAgcmV0dXJuIFZJRVdfVFlQRV9WQV9DSEFUO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKSB7XHJcbiAgICByZXR1cm4gdChcIlZBIENoYXQgVmlld1wiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uT3BlbigpIHtcclxuICAgIHRoaXMuaWNvbiA9IFwibWVzc2FnZS1jaXJjbGVcIjtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XHJcbiAgICBjb250YWluZXIuZW1wdHkoKTtcclxuICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJWQSBDSEFUIHZpZXdcIiB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKSB7XHJcbiAgICAvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxyXG4gIH1cclxufSIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgdCBmcm9tICdzcmMvbDEwbi9sb2NhbGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9WQV9ESVNDT1ZFUlkgPSBcInZhLWRpc2NvdmVyeS12aWV3XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVkFEaXNjb3ZlcnlWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYpIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKSB7XHJcbiAgICByZXR1cm4gVklFV19UWVBFX1ZBX0RJU0NPVkVSWTtcclxuICB9XHJcblxyXG4gIGdldERpc3BsYXlUZXh0KCkge1xyXG4gICAgcmV0dXJuIHQoXCJWQSBEaXNjb3ZlcnkgVmlld1wiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uT3BlbigpIHtcclxuICAgIHRoaXMuaWNvbiA9IFwibGluay0yXCI7XHJcblxyXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgY29udGFpbmVyLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIlZJRVdfVFlQRV9WQV9ESVNDT1ZFUlkgdmlld1wiIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DbG9zZSgpIHtcclxuICAgIC8vIE5vdGhpbmcgdG8gY2xlYW4gdXAuXHJcbiAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUFpSTs7O0FDQWpJLElBQUFDLG1CQUF1RDs7O0FDQXZELHNCQUF1Qjs7O0FDRXZCLElBQU8sYUFBUTtBQUFBO0FBQUE7QUFBQSxFQU1YLHFCQUFxQjtBQUFBLEVBQ3JCLG1CQUFtQjtBQUFBLEVBQ25CLGtDQUFrQztBQUFBLEVBQ2xDLDJCQUEyQjtBQUFBLEVBRzNCLG9CQUFvQjtBQUFBLEVBQ3BCLHVCQUF1QjtBQUFBLEVBQ3ZCLFlBQVk7QUFBQTtBQUFBLEVBSVosZ0JBQWdCO0FBQUEsRUFDaEIscUJBQXFCO0FBRXpCOzs7QUNyQkEsSUFBTyxnQkFBUTtBQUFBO0FBQUE7QUFBQSxFQU9YLHFCQUFxQjtBQUFBLEVBQ3JCLG1CQUFtQjtBQUFBLEVBQ25CLDRCQUE0QjtBQUFBLEVBSTVCLG9CQUFvQjtBQUFBLEVBQ3BCLHVCQUF1QjtBQUFBLEVBQ3ZCLFlBQVk7QUFDaEI7OztBRmRBLElBQU0sWUFBaUQ7QUFBQSxFQUNuRDtBQUFBLEVBQ0EsU0FBUztBQUNiO0FBRUEsSUFBTSxTQUFTLFVBQVUsdUJBQU8sT0FBTyxDQUFDO0FBRXpCLFNBQVIsRUFBbUIsS0FBOEI7QUFDcEQsTUFBSSxDQUFDLFFBQVE7QUFDVCxZQUFRLE1BQU0sc0NBQXNDLHVCQUFPLE9BQU8sQ0FBQztBQUFBLEVBQ3ZFO0FBRUEsU0FBUSxVQUFVLE9BQU8sR0FBRyxLQUFNLFdBQUcsR0FBRztBQUM1Qzs7O0FEYk8sSUFBTSx1QkFBTixjQUFtQyxrQ0FBaUI7QUFBQSxFQUd2RCxZQUFZLEtBQVUsUUFBMEI7QUFDNUMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUNBLFVBQWdCO0FBQ1osVUFBTSxFQUFFLFlBQVksSUFBSTtBQUV4QixnQkFBWSxNQUFNO0FBT2xCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxDQUFDO0FBRTNELFFBQUkseUJBQVEsV0FBVyxFQUNsQixRQUFRLEVBQUUsaUJBQWlCLENBQUMsRUFDNUIsUUFBUSxVQUFRLEtBQ1osZUFBZSxtQkFBbUIsRUFDbEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxjQUFjLEVBQzVDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLFdBQUssT0FBTyxTQUFTLGlCQUFpQjtBQUN0QyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBR1YsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsRUFBRSxnQ0FBZ0MsQ0FBQyxFQUkzQztBQUFBLE1BQVUsQ0FBQyxXQUNSLE9BQ0ssU0FBUyxLQUFLLE9BQU8sU0FBUyxXQUFXLEVBQ3pDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLGFBQUssT0FBTyxTQUFTLGNBQWM7QUFDbkMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNUO0FBQ0osUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsV0FBVyxFQUluQjtBQUFBLE1BQVEsQ0FBQyxTQUNOLEtBQ0ssZUFBZSxxQkFBcUIsRUFDcEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxVQUFVLFNBQVMsQ0FBQyxFQUNsRCxTQUFTLE9BQU8sVUFBVTtBQUV2QixjQUFNLFlBQVksU0FBUyxLQUFLO0FBQ2hDLFlBQUksTUFBTSxTQUFTLEdBQUc7QUFDbEIsY0FBSSx3QkFBTyxzQ0FBc0M7QUFDakQ7QUFBQSxRQUNKO0FBRUEsYUFBSyxPQUFPLFNBQVMsWUFBWTtBQUNqQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFHbkMsQ0FBQztBQUFBLElBQ1Q7QUFFSixRQUFJLHlCQUFRLFdBQVcsRUFDbEIsUUFBUSxFQUFFLHlCQUF5QixDQUFDLEVBQ3BDO0FBQUEsTUFBZ0IsQ0FBQyxpQkFDZCxhQUNLLGVBQWUsV0FBVyxFQUMxQixTQUFTLEtBQUssT0FBTyxTQUFTLE1BQU0sRUFDcEMsaUJBQWlCLHVCQUF1QixFQUN4QyxTQUFTLE9BQU8sVUFBVTtBQUN2QixhQUFLLE9BQU8sU0FBUyxTQUFTO0FBQzlCLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDVDtBQUVKLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFdkUsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUFBLEVBRS9FO0FBQ0o7OztBSXpGQSxJQUFBQyxtQkFBd0M7QUFHakMsSUFBTSxvQkFBb0I7QUFFMUIsSUFBTSxhQUFOLGNBQXlCLDBCQUFTO0FBQUEsRUFDdkMsWUFBWSxNQUFxQjtBQUMvQixVQUFNLElBQUk7QUFBQSxFQUNaO0FBQUEsRUFFQSxjQUFjO0FBQ1osV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGlCQUFpQjtBQUNmLFdBQU8sRUFBRSxjQUFjO0FBQUEsRUFDekI7QUFBQSxFQUVBLE1BQU0sU0FBUztBQUNiLFNBQUssT0FBTztBQUNaLFVBQU0sWUFBWSxLQUFLLFlBQVksU0FBUyxDQUFDO0FBQzdDLGNBQVUsTUFBTTtBQUNoQixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQUEsRUFDbkQ7QUFBQSxFQUVBLE1BQU0sVUFBVTtBQUFBLEVBRWhCO0FBQ0Y7OztBQzVCQSxJQUFBQyxtQkFBd0M7QUFHakMsSUFBTSx5QkFBeUI7QUFFL0IsSUFBTSxrQkFBTixjQUE4QiwwQkFBUztBQUFBLEVBQzVDLFlBQVksTUFBcUI7QUFDL0IsVUFBTSxJQUFJO0FBQUEsRUFDWjtBQUFBLEVBRUEsY0FBYztBQUNaLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxpQkFBaUI7QUFDZixXQUFPLEVBQUUsbUJBQW1CO0FBQUEsRUFDOUI7QUFBQSxFQUVBLE1BQU0sU0FBUztBQUNiLFNBQUssT0FBTztBQUVaLFVBQU0sWUFBWSxLQUFLLFlBQVksU0FBUyxDQUFDO0FBQzdDLGNBQVUsTUFBTTtBQUNoQixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFBQSxFQUNsRTtBQUFBLEVBRUEsTUFBTSxVQUFVO0FBQUEsRUFFaEI7QUFDRjs7O0FOWkEsSUFBTSxtQkFBNkM7QUFBQSxFQUNsRCxnQkFBZ0I7QUFBQSxFQUNoQixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixXQUFXO0FBQ1o7QUFLQSxJQUFxQixtQkFBckIsY0FBOEMsd0JBQU87QUFBQSxFQU1wRCxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLO0FBQUEsTUFDSjtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksV0FBVyxJQUFJO0FBQUEsSUFDOUI7QUFDQSxTQUFLO0FBQUEsTUFDSjtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksZ0JBQWdCLElBQUk7QUFBQSxJQUNuQztBQU1BLFVBQU0sU0FBUztBQUVmLFNBQUssY0FBYyxlQUFlLFFBQVEsT0FBTyxRQUFvQjtBQUdwRSxVQUFJLHdCQUFPLDZDQUE2QztBQUFBLElBQ3pELENBQUM7QUFHRCxVQUFNLGdCQUFnQjtBQUN0QixTQUFLLGNBQWMsVUFBVSxlQUFlLE9BQU8sUUFBb0I7QUFDdEUsV0FBSyxrQkFBa0I7QUFBQSxJQUN4QixDQUFDO0FBRUQsVUFBTSxXQUFXO0FBQ2pCLFNBQUssY0FBYyxrQkFBa0IsVUFBVSxPQUFPLFFBQW9CO0FBQ3pFLFdBQUssYUFBYTtBQUFBLElBQ25CLENBQUM7QUFJRCxTQUFLLGNBQWMsSUFBSSxxQkFBcUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUkzRCxTQUFLLGlCQUFpQixVQUFVLFNBQVMsQ0FBQyxRQUFvQjtBQUM3RCxjQUFRLElBQUksU0FBUyxHQUFHO0FBQUEsSUFDekIsQ0FBQztBQUdELFNBQUssaUJBQWlCLE9BQU8sWUFBWSxNQUFNLFFBQVEsSUFBSSxhQUFhLEdBQUcsSUFBSSxLQUFLLEdBQUksQ0FBQztBQUFBLEVBQzFGO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUFBLEVBR0EsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sRUFBRSxVQUFVLElBQUksS0FBSztBQUUzQixRQUFJLE9BQTZCO0FBQ2pDLFVBQU0sU0FBUyxVQUFVLGdCQUFnQixpQkFBaUI7QUFFMUQsUUFBSSxPQUFPLFNBQVMsR0FBRztBQUV0QixhQUFPLE9BQU8sQ0FBQztBQUFBLElBQ2hCLE9BQU87QUFHTixhQUFPLFVBQVUsYUFBYSxLQUFLO0FBQ25DLFVBQUksTUFBTTtBQUNULGNBQU0sS0FBSyxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsUUFBUSxLQUFLLENBQUM7QUFBQSxNQUNsRSxPQUFPO0FBQ04sZ0JBQVEsTUFBTSxnREFBZ0Q7QUFDOUQ7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUdBLFFBQUksTUFBTTtBQUNULGdCQUFVLFdBQVcsSUFBSTtBQUFBLElBQzFCO0FBQUEsRUFDRDtBQUFBLEVBR0EsTUFBTSxvQkFBb0I7QUFDekIsVUFBTSxFQUFFLFVBQVUsSUFBSSxLQUFLO0FBRTNCLFFBQUksT0FBNkI7QUFDakMsVUFBTSxTQUFTLFVBQVUsZ0JBQWdCLHNCQUFzQjtBQUUvRCxRQUFJLE9BQU8sU0FBUyxHQUFHO0FBRXRCLGFBQU8sT0FBTyxDQUFDO0FBQUEsSUFDaEIsT0FBTztBQUdOLGFBQU8sVUFBVSxhQUFhLEtBQUs7QUFDbkMsVUFBSSxNQUFNO0FBQ1QsY0FBTSxLQUFLLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixRQUFRLEtBQUssQ0FBQztBQUFBLE1BQ3ZFLE9BQU87QUFFTixnQkFBUSxNQUFNLDRCQUE0QjtBQUMxQztBQUFBLE1BQ0Q7QUFBQSxJQUNEO0FBR0EsUUFBSSxNQUFNO0FBQ1QsZ0JBQVUsV0FBVyxJQUFJO0FBQUEsSUFDMUI7QUFBQSxFQUNEO0FBQUEsRUFHQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
